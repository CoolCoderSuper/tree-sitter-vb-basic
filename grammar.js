/// <reference types="tree-sitter-cli/dsl" />
// @ts-check

module.exports = grammar({
  name: "vb_basic",
  rules: {
      source_file: $ => repeat(choice(
      $.keyword,
      $.identifier,
      $.number,
      $.string,
      $.comment,
      $.operator,
      $.punctuation
    )),
    keyword: $ => token(choice(
      caseInsensitive("If"),
      caseInsensitive("Then"),
      caseInsensitive("ElseIf"),
      caseInsensitive("Else"),
      caseInsensitive("Select"),
      caseInsensitive("Case"),
      caseInsensitive("AddressOf"),
      caseInsensitive("And"),
      caseInsensitive("ByRef"),
      caseInsensitive("ByVal"),
      caseInsensitive("In"),
      caseInsensitive("Is"),
      caseInsensitive("Like"),
      caseInsensitive("Mod"),
      caseInsensitive("Not"),
      caseInsensitive("Or"),
      caseInsensitive("To"),
      caseInsensitive("Xor"),
      caseInsensitive("True"),
      caseInsensitive("False"),
      caseInsensitive("Nothing"),
      caseInsensitive("Do"),
      caseInsensitive("For"),
      caseInsensitive("ForEach"),
      caseInsensitive("Loop"),
      caseInsensitive("Next"),
      caseInsensitive("Step"),
      caseInsensitive("Until"),
      caseInsensitive("Wend"),
      caseInsensitive("While"),
      caseInsensitive("CBool"),
      caseInsensitive("CByte"),
      caseInsensitive("CCur"),
      caseInsensitive("CDate"),
      caseInsensitive("CDbl"),
      caseInsensitive("CInt"),
      caseInsensitive("CLng"),
      caseInsensitive("CSng"),
      caseInsensitive("CStr"),
      caseInsensitive("CVDate"),
      caseInsensitive("CVErr"),
      caseInsensitive("Alias"),
      caseInsensitive("As"),
      caseInsensitive("Base"),
      caseInsensitive("Begin"),
      caseInsensitive("Call"),
      caseInsensitive("Const"),
      caseInsensitive("Date"),
      caseInsensitive("Declare"),
      caseInsensitive("Dim"),
      caseInsensitive("Each"),
      caseInsensitive("End"),
      caseInsensitive("Enum"),
      caseInsensitive("Error"),
      caseInsensitive("Event"),
      caseInsensitive("Exit"),
      caseInsensitive("Explicit"),
      caseInsensitive("Function"),
      caseInsensitive("Get"),
      caseInsensitive("GoTo"),
      caseInsensitive("Implements"),
      caseInsensitive("Let"),
      caseInsensitive("Lib"),
      caseInsensitive("Lock"),
      caseInsensitive("On"),
      caseInsensitive("OnError"),
      caseInsensitive("Option"),
      caseInsensitive("Private"),
      caseInsensitive("Property"),
      caseInsensitive("Public"),
      caseInsensitive("RaiseEvent"),
      caseInsensitive("Redim"),
      caseInsensitive("Resume"),
      caseInsensitive("Return"),
      caseInsensitive("Set"),
      caseInsensitive("Static"),
      caseInsensitive("Sub"),
      caseInsensitive("With"),
      caseInsensitive("Binary"),
      caseInsensitive("Friend"),
      caseInsensitive("Me"),
      caseInsensitive("New"),
      caseInsensitive("Optional"),
      caseInsensitive("ParamArray"),
      caseInsensitive("String"),
      caseInsensitive("WithEvents"),
      caseInsensitive("Class"),
      caseInsensitive("Module"),
      caseInsensitive("Imports"),
      caseInsensitive("Overridable"),
      caseInsensitive("Protected"),
      caseInsensitive("Overrides"),
      caseInsensitive("OrElse"),
      caseInsensitive("AndAlso"),
      caseInsensitive("Interface"),
      caseInsensitive("Namespace"),
      caseInsensitive("ReadOnly"),
      caseInsensitive("AddHandler"),
      caseInsensitive("Overloads"),
      caseInsensitive("RemoveHandler"),
      caseInsensitive("CType"),
      caseInsensitive("DirectCast"),
      caseInsensitive("CDec"),
      caseInsensitive("Handles"),
      caseInsensitive("Async"),
      caseInsensitive("Await"),
      caseInsensitive("MyBase"),
      caseInsensitive("IsNot"),
      caseInsensitive("Of"),
      caseInsensitive("Try"),
      caseInsensitive("Catch"),
      caseInsensitive("Finally"),
      caseInsensitive("Throw"),
      caseInsensitive("Shared"),
      caseInsensitive("Using"),
      caseInsensitive("Shadows"),
      caseInsensitive("MustInherit"),
      caseInsensitive("MustOverride"),
      caseInsensitive("Inherits"),
      caseInsensitive("Operator"),
      caseInsensitive("Iterator"),
      caseInsensitive("Narrowing"),
      caseInsensitive("Widening"),
      caseInsensitive("Partial"),
      caseInsensitive("NotInheritable"),
      caseInsensitive("NotOverridable"),
      caseInsensitive("GetType"),
      caseInsensitive("Region"),
      caseInsensitive("Boolean"),
      caseInsensitive("Byte"),
      caseInsensitive("Currency"),
      caseInsensitive("Decimal"),
      caseInsensitive("Double"),
      caseInsensitive("Empty"),
      caseInsensitive("Integer"),
      caseInsensitive("Long"),
      caseInsensitive("Object"),
      caseInsensitive("Variant")
    )),
    identifier: $ => /[a-z_][a-z0-9_]*/i,
    number: $ => /\d+(\.\d+)?/,
    string: $ => /"([^"]*)"/,
    comment: $ => token(seq("'", /.*/)),
    operator: $ => token(choice("=", "+", "-", "*", "/", "<", ">", "<=", ">=", "<>")),
    punctuation: $ => token(choice("(", ")", "{", "}", ",", "."))}
});

function caseInsensitive (keyword, aliasAsWord = true) {
  let result = new RegExp(keyword
    .split('')
    .map(l => l !== l.toUpperCase() ? `[${l}${l.toUpperCase()}]` : l)
    .join('')
  )
  if (aliasAsWord) result = alias(result, keyword)
  return result
}
